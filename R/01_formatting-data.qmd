---
title: "01_formatting-data"
author: "Dave"
format: html
editor: visual
---

## Libraries

```{r libraries}
library(conflicted)
library(fs)
library(here)

library(dplyr)
conflicted::conflicts_prefer(dplyr::filter)
library(ggplot2)
library(scales)
library(forcats)
library(stringr)
library(tidyr)

library(carutools)
```

## Read data

```{r read}
split <- readRDS(here("data", "northern-ireland_com-data-split.RDS"))

## Need to coerce to a simple list, rather than a list_of - the
## constraints of the latter prevent serious manipulation here
split <- as.list(split)

cat(names(split), sep = "\t")
```

## Format data

### Age-five-year

#### Investigate differences between single and five-year age

```{r age_comparison}
five_year_pops <-
  split[["age-five-year"]] |>
  filter(level == "centre-of-mission") |> 
  group_by(com) |> 
  summarise(population = sum(count))

single_year_pops <-
  split[["age-single-year"]] |>
  filter(level == "centre-of-mission") |> 
  group_by(com) |> 
  summarise(population = sum(count))

pops <-
  left_join(five_year_pops,
            single_year_pops,
            by = "com", suffix = c("_five_year", "_single_year")) |> 
  mutate(difference = population_five_year - population_single_year,
         relative = difference/population_five_year)

ggplot(pops, aes(x = difference)) +
  geom_density(fill = ca_cyan()) +
  theme_minimal()

ggplot(pops, aes(x = relative)) +
  geom_density(fill = ca_cyan()) +
  scale_x_continuous(labels = percent) +
  theme_minimal()
```

Okay let's not use single-year age - the total population counts are out by as much as \~75%!

#### Format five year age data

```{r five_year_age_to_factor}
age_reorder <- \(x){
  fct_reorder(x, 
              as.numeric(str_extract(x, "\\d+")))
}

split[["age-five-year"]] <-
  mutate(split[["age-five-year"]], 
         category =
           ordered(category) |>
           age_reorder())
```

#### Choose breaks

```{r age_five_year_breaks}

breaks <- c(0, 10, 20, 30, 45, 60, 70)

break_make <-
  split[["age-five-year"]] |> 
  summarise(.by = category) |> 
  arrange(category)

break_make <- 
  mutate(break_make,
         nums = str_extract_all(category, "\\d+")) |> 
  unnest(nums) |> 
  
  group_by(category) |> 
  summarise(
    lower = min(nums),
    upper = max(nums)) |> 
  
  ungroup() |>
  mutate(across(c(lower, upper), as.numeric)) |> 
  mutate(lower = replace(lower, upper == 4, 0),
         upper = replace(upper, lower == 85, Inf))

break_make

break_make <- 
  mutate(break_make, this_break = breaks[match(lower, breaks)]) |> 
  fill(this_break)

break_levels <-
  str_c(breaks, lead(breaks) - 1, sep = "-") |> 
  coalesce(str_c(breaks, "+")) |> 
  str_c(" years old")

break_make <- 
  mutate(break_make,
         category_label = break_levels[match(this_break, breaks)],
         category_label = 
           ordered(category_label) |> 
           fct_inorder())

break_make <- 
  select(break_make, category, category_label)

split[["age-five-year"]] <- 
  left_join(split[["age-five-year"]], break_make, by = "category") |> 
  rename(old_category = category) |> 
  rename(category = category_label) |>
  summarise(across(c(count, proportion), sum),
            .by = c(-count, -proportion, -old_category)) |> 
  arrange(com, level, category)

## quick plot

quick_plot <- function(x){
  ggplot(
    split[[x]] |> 
      filter(com == sample(com, 1)),
    aes(x = category, y = proportion, fill = level)) + 
  geom_col(position = "dodge2", colour = "black") + 
  ca_scale_fill_discrete() + 
  scale_y_continuous(labels = percent) +
  theme_minimal()
}

  quick_plot("age-five-year") +
    scale_x_discrete(labels = \(x) str_replace(x, " ", "\n"))
```

### Ethnicity

```{r ethnicity}

capitalise <- function(x){
  str_to_upper(str_sub(x, 1, 1)) |> 
    str_c(str_sub(x, 2, -1))
}


split[["ethnicity"]] <- 
  mutate(
    split[["ethnicity"]],
    category =
      case_match(
        category,
             
        "black_african"     ~ "Black\nAfrican",
        "black_other"       ~ "Black\nnon-African",
             
        "irish_traveller"   ~ "Irish\ntraveller",
             
        "other_asian"       ~ "Other",
        "other_ethnicities" ~ "Other",
        
        .default = category
        ) |>
      ordered() |> 
      fct_relabel(capitalise)
    )

quick_plot("ethnicity") +
    scale_x_discrete(label = \(x) str_replace(x, "/", "\n"))
```

#### Harmonised ethnicity

```{r harmonisedEthnicity}
# 
# capitalise <- function(x, start = 1, end = 1){
#   str_c(
#     str_sub(x, 0, start-1),
#     str_to_upper(str_sub(x, start, end)),
#     str_sub(x, end+1, -1)
#   )
# }

split[["ethnicity-harmonised"]] <- 
  mutate(split[["ethnicity-harmonised"]],
         category =
           capitalise(category) |> 
           ordered()
         )

quick_plot("ethnicity-harmonised")
```

### General health

```{r generalHealth}

split[["general-health"]] <- 
  mutate(
    split[["general-health"]],
    category = 
      str_replace(category, "_", " ") |> 
      capitalise() |> 
      ordered(levels = c("Very bad", "Bad", "Fair", "Good", "Very good"))
  )

quick_plot("general-health")
```

#### Household composition

```{r householdComposition}

split[["household-composition"]] <-
  mutate(
    split[["household-composition"]],
    
    category_super = 
      case_when(
        str_starts(category, "one_person_household_") ~ "Lone occupant",
        str_detect(category, "_couple_")              ~ "Couple",
        str_detect(category, "_lone_parent_")         ~ "Lone parent",
        str_detect(category, "other")                 ~ "Other"
      ) |> 
      factor(),
    
    category = 
      case_match(
        category,
        
        "one_person_household_aged_66_and_over" ~ 
          "Lone occupant\n(66+ y.o)",
        
        "one_person_household_other" ~
          "Lone occupant\n(other)",
        
        
        "other_household_types" ~ "Other\nhouseholds",
        
        
        "single_family_household_couple_family_household_dependent_children" ~ 
          "Couple w/\ndep. children",
        
        "single_family_household_couple_family_household_all_children_non_dependent" ~ 
          "Couple w/\no children dep.",
        
        "single_family_household_couple_family_household_no_children" ~ 
          "Couple\n(no children)",
        
        
        "single_family_household_lone_parent_family_with_dependent_children" ~
          "Lone parent w/\ndep. children",
        
        "single_family_household_lone_parent_family_all_children_non_dependent" ~
          "Lone parent w/\nno children dep.",
        
        "single_family_household_other_family_composition_including_all_aged_66_and_over" ~
          "Other families\n(inc. all 66+ y.o.)"
      )
    )



ggplot(split[["household-composition"]] |> 
         filter(com == sample(com, 1)) |> 
         group_by(level, super_category) |> 
         summarise(proportion = sum(proportion)),
       aes(x = super_category, y = proportion, fill = level)) + 
  geom_col(position = "dodge2", colour = "black") + 
  ca_scale_fill_discrete() + 
  theme_minimal()
```

#### Religion

```{r formatReligion}
split[["religion"]] <- 
  mutate(split[["religion"]],
         category =
           case_match(
             category,
             
             "catholic" ~ "Catholic",
             "church_of_ireland" ~ "Other\nChristian",
             "methodist_church_in_ireland" ~ "Other\nChristian",
             "presbyterian_church_in_ireland" ~ "Other\nChristian",
             "other_christian_including_christian_related" ~ "Other\nChristian",
             
             "no_religion" ~ "No\nreligion",
             
             "religion_not_stated" ~ "Not\nstated",
             
             "other_religions" ~ "other_religions"
             )|>
           ordered()
         )
```

## Save Data

```{r save_data}
saveRDS(split, here("data", "england-and-wales_split-formatted.RDS"))
```
